Microsoft (R) Macro Assembler Version 14.34.31937.0	    03/19/23 12:31:54
Proj6_bramank.asm					     Page 1 - 1


				; Project 6    (Proj6_bramank.asm)

				; Author: Kevin Braman
				; Last Modified: 03/18/2023
				; OSU email address: bramankD@oregonstate.edu
				; Course number/section: CS 271 Section 402
				; Project Number: 5		Due Date: 03/19/2023
				; Description: This program prompts the user to enter 10 integers in string form, converts the string primitives into SDWORD integers, 
				;			   computes the sum and average of the integers entered, and then converts the SDWORD integers back into strings. The 
				;			   integers entered, their sum and their truncated average is displayed. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	mGetString
				;
				; Calls the Irvine Library procedure "ReadString" to record user input and store it in a memory location. 
				;
				; Preconditions:	Uses ECX, EDX | PROC WriteString, ReadString 
				; Receives:			
				;					prompt					= string containing prompt message, in memory as input_1
				;					memoryLocation			= memory location to store read string, in memory as array stringInput
				;					memoryLocationLength	= length of memory location, in memory as lenStringInpt 
				;
				; Returns:			None, stores read string in variable memoryLocation
				;-----------------------------------------------------------------------------------------------------------------------------------------------

				mGetString MACRO prompt, memoryLocation, memoryLocationLength

					PUSH	ECX
					PUSH	EDX
					MOV		ECX, memoryLocationLength
					MOV		EDX, prompt
					CALL	WriteString
					MOV		EDX, memoryLocation
					CALL	ReadString
					MOV		memoryLocation, EDX
					POP		EDX
					POP		ECX

				ENDM

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	mDisplayString
				;
				; Calls the Irvine Library procedure "WriteString" to output a passed string. 
				;
				; Preconditions:	Uses EDX | PROC WriteString
				; Receives:			
				;					memoryLocation			= memory location that stores a string array
				;
				; Returns:			Outputs the passed string to the user
				;-----------------------------------------------------------------------------------------------------------------------------------------------

				mDisplayString MACRO memoryLocation

					PUSH	EDX
					MOV		EDX, memoryLocation
					CALL	WriteString
					POP		EDX

				ENDM

 00000000			.data
 00000000 09 09 09 09 09	intro_1			BYTE	"					Program 06 by Kevin Braman", 13, 10, 0
	   50 72 6F 67 72
	   61 6D 20 30 36
	   20 62 79 20 4B
	   65 76 69 6E 20
	   42 72 61 6D 61
	   6E 0D 0A 00
 00000022 50 6C 65 61 73	intro_2			BYTE	"Please provide 10 signed decimal integers.", 13, 10, 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 00
 0000004F 50 6C 65 61 73	intro_3			BYTE	"Please note that each number must be small enough to fit inside a 32 bit register.", 13, 10, 0
	   65 20 6E 6F 74
	   65 20 74 68 61
	   74 20 65 61 63
	   68 20 6E 75 6D
	   62 65 72 20 6D
	   75 73 74 20 62
	   65 20 73 6D 61
	   6C 6C 20 65 6E
	   6F 75 67 68 20
	   74 6F 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 0D 0A 00
 000000A4 41 66 74 65 72	intro_4			BYTE	"After you are finished this program will display a list of numbers entered, their sum, and their average.", 13, 10, 0
	   20 79 6F 75 20
	   61 72 65 20 66
	   69 6E 69 73 68
	   65 64 20 74 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 61
	   20 6C 69 73 74
	   20 6F 66 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 2E
	   0D 0A 00
 00000110 50 6C 65 61 73	input_1			BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000130 45 52 52 4F 52	error_1			BYTE	"ERROR: Input not a signed integer or input too large!", 13, 10, 0
	   3A 20 49 6E 70
	   75 74 20 6E 6F
	   74 20 61 20 73
	   69 67 6E 65 64
	   20 69 6E 74 65
	   67 65 72 20 6F
	   72 20 69 6E 70
	   75 74 20 74 6F
	   6F 20 6C 61 72
	   67 65 21 0D 0A
	   00
 00000168 59 6F 75 20 65	output_1		BYTE	"You entered the following numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 0000018D 54 68 65 20 73	output_2		BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001AB 54 68 65 20 74	output_3		BYTE	"The truncated average is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000001C6 54 68 61 6E 6B	outro_1			BYTE	"Thank you for using this program! Goodbye!", 13, 10, 0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 21 20 47
	   6F 6F 64 62 79
	   65 21 0D 0A 00
 000001F3  00000014 [		stringInput		BYTE	20 DUP(?)
	    00
	   ]
 00000207  00000014 [		writeValOutput	BYTE	20 DUP(?)
	    00
	   ]
 0000021B 00000014		lenStringInpt	DWORD	LENGTHOF stringInput
 0000021F 0000000A		lenSavedInt     DWORD	LENGTHOF savedIntegers
 00000223 00000014		lenWriteVal		DWORD	LENGTHOF writeValOutput
 00000227 00000000		savedIntCount	DWORD	0
 0000022B 00000000		sumCount		DWORD	0
 0000022F 00000000		avgCount		DWORD	0
 00000233 00000000		readValOutput	SDWORD	?
 00000237  0000000A [		savedIntegers	SDWORD	10 DUP(?)
	    00000000
	   ]
 0000025F 00000000		savedIntOutput	SDWORD	0
 00000263 00000000		outputSum		SDWORD	0
 00000267 00000000		outputAvg		SDWORD  0

 00000000			.code

 00000000			main PROC

					; Introduction

 00000000  68 00000000 R		PUSH	OFFSET intro_1
 00000005  68 00000022 R		PUSH	OFFSET intro_2
 0000000A  68 0000004F R		PUSH	OFFSET intro_3
 0000000F  68 000000A4 R		PUSH	OFFSET intro_4
 00000014  E8 00000161			CALL	introduction

					; Get 10 integers from the user, convert them to SDWORDs 

 00000019			_PrepareValLoop:
 00000019  51				PUSH	ECX
 0000001A  57				PUSH	EDI
 0000001B  B9 0000000A			MOV		ECX, 10
 00000020  BF 00000237 R		MOV		EDI, OFFSET savedIntegers 

 00000025				_ReadValLoop:
 00000025  FF 35 0000021B R			PUSH	lenStringInpt
 0000002B  68 00000233 R			PUSH	OFFSET readValOutput
 00000030  68 00000130 R			PUSH	OFFSET error_1
 00000035  68 000001F3 R			PUSH	OFFSET stringInput
 0000003A  68 00000110 R			PUSH	OFFSET input_1
 0000003F  E8 00000169				CALL	ReadVal
 00000044  A1 00000233 R			MOV		EAX, readValOutput
 00000049  AB					STOSD
 0000004A  E2 D9				LOOP	_ReadValLoop
 0000004C  5F					POP		EDI
 0000004D  59					POP		ECX
 0000004E				_ReadValLoopEnd:
					
					; Calculate Sum & Average

 0000004E  68 00000237 R		PUSH	OFFSET savedIntegers 
 00000053  68 00000267 R		PUSH	OFFSET outputAvg
 00000058  68 00000263 R		PUSH	OFFSET outputSum
 0000005D  FF 35 0000021F R		PUSH	lenSavedInt 
 00000063  E8 00000249			CALL	Calculation

					; Calculate Sum & Average digit counts

 00000068  68 0000022B R		PUSH	OFFSET sumCount
 0000006D  FF 35 00000263 R		PUSH	outputSum	
 00000073  E8 0000026D			CALL	InputCount
 00000078  68 0000022F R		PUSH	OFFSET avgCount
 0000007D  FF 35 00000267 R		PUSH	outputAvg	
 00000083  E8 0000025D			CALL	InputCount

					; Output array

 00000088  52				PUSH	EDX
 00000089  E8 00000000 E		CALL	CrLf
 0000008E  BA 00000168 R		MOV		EDX, OFFSET output_1
 00000093  E8 00000000 E		CALL	WriteString
 00000098  5A				POP		EDX

 00000099			_PrepareWriteValLoop:
 00000099  50				PUSH	EAX
 0000009A  51				PUSH	ECX
 0000009B  56				PUSH	ESI
 0000009C  B9 0000000A			MOV		ECX, 10
 000000A1  BE 00000237 R		MOV		ESI, OFFSET savedIntegers

 000000A6				_WriteValLoop:
 000000A6  AD					LODSD
 000000A7  FF 35 00000227 R			PUSH	savedIntCount
 000000AD  A3 0000025F R			MOV		savedIntOutput, EAX
 000000B2  68 00000227 R			PUSH	OFFSET savedIntCount
 000000B7  FF 35 0000025F R			PUSH	savedIntOutput	
 000000BD  E8 00000223				CALL	InputCount
 000000C2  68 00000207 R			PUSH	OFFSET writeValOutput
 000000C7  FF 35 00000227 R			PUSH	savedIntCount
 000000CD  FF 35 0000025F R			PUSH	savedIntOutput
 000000D3  E8 00000181				CALL	WriteVal
 000000D8  83 F9 01				CMP		ECX, 1
 000000DB  74 0E				JE		_SkipLastComma
 000000DD  B0 2C				MOV		AL, ","
 000000DF  E8 00000000 E			CALL	WriteChar
 000000E4  B0 20				MOV		AL, " "
 000000E6  E8 00000000 E			CALL	WriteChar
 000000EB					_SkipLastComma:
 000000EB  68 00000207 R			PUSH	OFFSET writeValOutput
 000000F0  FF 35 00000223 R			PUSH	lenWriteVal
 000000F6  E8 00000224				CALL	ClearArray
 000000FB  8F 05 00000227 R			POP		savedIntCount
 00000101  E2 A3				LOOP	_WriteValLoop
 00000103				_WriteValLoopEnd:
 00000103  E8 00000000 E		CALL	CrLf
 00000108  5E				POP		ESI
 00000109  59				POP		ECX
 0000010A  58				POP		EAX

					; Output Sum

 0000010B  52				PUSH	EDX
 0000010C  BA 0000018D R		MOV		EDX, OFFSET output_2
 00000111  E8 00000000 E		CALL	WriteString
 00000116  5A				POP		EDX
 00000117  68 00000207 R		PUSH	OFFSET writeValOutput
 0000011C  FF 35 0000022B R		PUSH	sumCount
 00000122  FF 35 00000263 R		PUSH	outputSum
 00000128  E8 0000012C			CALL	WriteVal
 0000012D  E8 00000000 E		CALL	CrLf
					
					; Output Avg

 00000132  52				PUSH	EDX
 00000133  BA 000001AB R		MOV		EDX, OFFSET output_3
 00000138  E8 00000000 E		CALL	WriteString
 0000013D  5A				POP		EDX
 0000013E  68 00000207 R		PUSH	OFFSET writeValOutput
 00000143  FF 35 00000223 R		PUSH	lenWriteVal
 00000149  E8 000001D1			CALL	ClearArray
 0000014E  68 00000207 R		PUSH	OFFSET writeValOutput
 00000153  FF 35 0000022F R		PUSH	avgCount
 00000159  FF 35 00000267 R		PUSH	outputAvg
 0000015F  E8 000000F5			CALL	WriteVal
					
					; Outro

 00000164  E8 00000000 E		CALL	CrLf
 00000169  68 000001C6 R		PUSH	OFFSET outro_1
 0000016E  E8 000001C7			CALL	Goodbye

						Invoke ExitProcess,0	; exit to operating system
 00000173  6A 00	   *	    push   +000000000h
 00000175  E8 00000000 E   *	    call   ExitProcess
 0000017A			main ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	introduction
				;
				; The 'introduction' procedure displays the title and program instructions before returning. 
				;
				; Preconditions:	PROC: WriteString, CrLf
				; Postconditions:	All registers remain unmodified.
				; Receives:			REGISTERS: EBP, EDX  
				;					VARIABLES: OFFSET intro_1 [EBP+20], OFFSET intro_2 [EBP+16], OFFSET intro_3 [EBP+12], OFFSET intro_4 [EBP+8]
				;					
				; Returns:			Outputs intro_1, intro_2, intro_3, intro_4
				;-----------------------------------------------------------------------------------------------------------------------------------------------


 0000017A			introduction PROC

 0000017A  55				PUSH	EBP
 0000017B  8B EC			MOV		EBP, ESP
 0000017D  52				PUSH	EDX
 0000017E  8B 55 14			MOV		EDX, [EBP+20]
 00000181  E8 00000000 E		CALL	WriteString
 00000186  E8 00000000 E		CALL	Crlf
 0000018B  8B 55 10			MOV		EDX, [EBP+16]
 0000018E  E8 00000000 E		CALL	WriteString
 00000193  8B 55 0C			MOV		EDX, [EBP+12]
 00000196  E8 00000000 E		CALL	WriteString
 0000019B  8B 55 08			MOV		EDX, [EBP+8]
 0000019E  E8 00000000 E		CALL	WriteString
 000001A3  E8 00000000 E		CALL	Crlf
 000001A8  5A				POP		EDX
 000001A9  5D				POP		EBP
 000001AA  C2 0010			RET		16

 000001AD			introduction ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	ReadVal
				;
				; The 'ReadVal' procedure uses the 'mGetString' macro to receive 10 integer intputs as strings and convert them into SDWORDS. If the user enters
				; a number that has an invalid character or the number entered is too large for a 32-bit register, an error message is shown and the user is 
				; reprompted for input.
				;
				; Preconditions:	MACRO: mGetString PROC: WriteString, CrLf
				; Postconditions:	All registers remain unmodified. VARIABLE readValOutput [EBP+20] modified
				; Receives:			REGISTERS: EBP, EAX, EBX, ECX, EDX, ESI  
				;					VARIABLES: OFFSET input_1 [EBP+8], OFFSET stringInput [EBP+12], OFFSET error_1 [EBP+16], OFFSET readValOutput [EBP+20],
				;							   lenStringInpt [EBP+24]
				;					
				; Returns:			readValOutput [EBP+20] 
				;-----------------------------------------------------------------------------------------------------------------------------------------------

 000001AD			ReadVal	PROC

					; Preserve registers

 000001AD  55				PUSH	EBP
 000001AE  8B EC			MOV		EBP, ESP
 000001B0  50				PUSH	EAX
 000001B1  53				PUSH	EBX
 000001B2  51				PUSH	ECX
 000001B3  52				PUSH	EDX
 000001B4  56				PUSH	ESI

 000001B5			_PrepareLoop:
 000001B5  8B 75 0C			MOV		ESI, [EBP+12]
 000001B8  B9 00000000			MOV		ECX, 0
 000001BD  EB 00			JMP		_Prompt

					; Use the macro mGetString to get string input from the user. 
					; Validate the user input. If the user input is invalid, an error message is called and the user is reprompted for input.
					; If initial input was negative, negate the converted SDWORD.
					; Write to memory and return.

 000001BF			_Prompt:
					mGetString [EBP+8], [EBP+12], [EBP+24]
 000001BF  51		     1		PUSH	ECX
 000001C0  52		     1		PUSH	EDX
 000001C1  8B 4D 18	     1		MOV		ECX, [EBP+24]
 000001C4  8B 55 08	     1		MOV		EDX, [EBP+8]
 000001C7  E8 00000000 E     1		CALL	WriteString
 000001CC  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001CF  E8 00000000 E     1		CALL	ReadString
 000001D4  89 55 0C	     1		MOV		[EBP+12], EDX
 000001D7  5A		     1		POP		EDX
 000001D8  59		     1		POP		ECX
 000001D9  8B D8			MOV		EBX, EAX
 000001DB  AC				LODSB
 000001DC  8B 75 0C			MOV		ESI, [EBP+12]
 000001DF  3C 2D			CMP		AL, 45
 000001E1  74 02			JE		_NegativeNumber
 000001E3  EB 0B			JMP		_NonNegative
					
					; If the number entered is negative.

 000001E5			_NegativeNumber:
 000001E5  83 FB 0B			CMP		EBX, 11
 000001E8  7F 44			JG		_InvalidInput
 000001EA  3C 00			CMP		AL, 0
 000001EC  74 40			JE		_InvalidInput
 000001EE  EB 0B			JMP		_Validate

					; If the number entered is positive.

 000001F0			_NonNegative:
 000001F0  83 FB 0A			CMP		EBX, 10
 000001F3  7F 39			JG		_InvalidInput
 000001F5  3C 00			CMP		AL, 0
 000001F7  74 35			JE		_InvalidInput
 000001F9  EB 00			JMP		_Validate

					; Validate ASCII characters are numbers.

 000001FB			_Validate:
 000001FB  AC				LODSB
 000001FC  81 F9 7FFFFFFF		CMP		ECX, 2147483647
 00000202  70 2A			JO		_InvalidInput
 00000204  3C 00			CMP		AL, 0
 00000206  74 35			JE		_ValidInput
 00000208  3C 2B			CMP		AL, 43
 0000020A  74 EF			JE		_Validate
 0000020C  3C 2D			CMP		AL, 45
 0000020E  74 EB			JE		_Validate
 00000210  3C 30			CMP		AL, 48
 00000212  7C 1A			JL		_InvalidInput
 00000214  3C 39			CMP		AL, 57
 00000216  7F 16			JG		_InvalidInput
 00000218  EB 00			JMP		_MainLoop
					
					; Convert ASCII into integer.

 0000021A			_MainLoop:
 0000021A  BB 0000000A			MOV		EBX, 10
 0000021F  0F BE C0			MOVSX	EAX, AL
 00000222  83 E8 30			SUB		EAX, 48
 00000225  91				XCHG	ECX, EAX
 00000226  F7 E3			MUL		EBX
 00000228  03 C1			ADD		EAX, ECX
 0000022A  8B C8			MOV		ECX, EAX
 0000022C  EB CD			JMP		_Validate

					; If the user enters an invalid character or the number is too large, they are reprompted for input.

 0000022E			_InvalidInput:
 0000022E  8B 55 10			MOV		EDX, [EBP+16]
 00000231  E8 00000000 E		CALL	WriteString
 00000236  33 C9			XOR		ECX, ECX
 00000238  8B 75 0C			MOV		ESI, [EBP+12]
 0000023B  EB 82			JMP		_Prompt

					; SDWORD is negated if negative was entered. 

 0000023D			_ValidInput:
 0000023D  8B 75 0C			MOV		ESI, [EBP+12]
 00000240  80 3E 2D			CMP		BYTE PTR [ESI], 45
 00000243  75 04			JNE		_WriteMemory
 00000245  F7 D9			NEG		ECX
 00000247  EB 00			JMP		_WriteMemory

					; Write to memory

 00000249			_WriteMemory:
 00000249  8B 5D 14			MOV		EBX, [EBP+20]
 0000024C  89 0B			MOV		[EBX], ECX
 0000024E  EB 00			JMP		_ReadValEnd

					; POP preserved registers.

 00000250			_ReadValEnd:
 00000250  5E				POP		ESI
 00000251  5A				POP		EDX
 00000252  59				POP		ECX
 00000253  5B				POP		EBX
 00000254  58				POP		EAX
 00000255  5D				POP		EBP
 00000256  C2 0018			RET		24

 00000259			ReadVal ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	WriteVal
				;
				; The 'WriteVal' procedure converts a SDWORD into a string containing its ASCII repesentation, then uses the macro 'mDisplayString' to display it.
				;
				; Preconditions:	MACRO: mDisplayString 
				; Postconditions:	All registers remain unmodified. VARIABLE writeValOutput [EBP+16] modified
				; Receives:			REGISTERS: EBP, EAX, EBX, ECX, EDX, EDI  
				;					VARIABLES: savedIntOutput [EBP+8] | outputSum [EBP+8] | outputAvg [EBP+8], 
				;						       savedIntCount [EBP+12] | sumCount [EBP+12] | avgCount [EBP+12],
				;							   OFFSET writeValOutput [EBP+16]
				;					
				; Returns:			The output of the string writeValOutput [EBP+16]
				;-----------------------------------------------------------------------------------------------------------------------------------------------

 00000259			WriteVal PROC
					
					; Preserve registers.

 00000259  55				PUSH	EBP
 0000025A  8B EC			MOV		EBP, ESP
 0000025C  50				PUSH	EAX
 0000025D  53				PUSH	EBX
 0000025E  51				PUSH	ECX
 0000025F  52				PUSH	EDX
 00000260  57				PUSH	EDI
					
					; If the SDWORD passed is negative, account for it by appending the negative sign to the beginning of the array. 

 00000261			_PrepareLoop:
 00000261  8B 45 08			MOV		EAX, [EBP+8]
 00000264  8B 7D 10			MOV		EDI, [EBP+16]
 00000267  83 F8 00			CMP		EAX, 0
 0000026A  7C 02			JL		_IsNegative
 0000026C  EB 0C			JMP		_NonNegative

 0000026E			_IsNegative:
 0000026E  F7 D8			NEG		EAX
 00000270  8B 5D 0C			MOV		EBX, [EBP+12]
 00000273  C6 07 2D			MOV		BYTE PTR [EDI], '-'
 00000276  03 FB			ADD		EDI, EBX
 00000278  EB 08			JMP		_WriteValLoop

 0000027A			_NonNegative:
 0000027A  8B 5D 0C			MOV		EBX, [EBP+12]
 0000027D  4B				DEC		EBX
 0000027E  03 FB			ADD		EDI, EBX		
 00000280  EB 00			JMP		_WriteValLoop

					; Calculate the ASCII equivalent of the integer.

 00000282			_WriteValLoop:
 00000282  FD				STD
 00000283  BB 0000000A			MOV		EBX, 10
 00000288  99				CDQ
 00000289  F7 FB			IDIV	EBX
 0000028B  8B C8			MOV		ECX, EAX
 0000028D  8B C2			MOV		EAX, EDX
 0000028F  83 C0 30			ADD		EAX, 48
 00000292  AA				STOSB
 00000293  8B C1			MOV		EAX, ECX
 00000295  83 F8 00			CMP		EAX, 0
 00000298  75 E8			JNE		_WriteValLoop
 0000029A  EB 00			JMP		_DisplayString

					; Call the macro mDisplayString to output to the user the converted string. 

 0000029C			_DisplayString:
					mDisplayString [EBP+16]
 0000029C  52		     1		PUSH	EDX
 0000029D  8B 55 10	     1		MOV		EDX, [EBP+16]
 000002A0  E8 00000000 E     1		CALL	WriteString
 000002A5  5A		     1		POP		EDX
 000002A6  EB 00			JMP		_WriteValEnd

					; Pop preserved registers. 

 000002A8			_WriteValEnd:
 000002A8  5F				POP		EDI
 000002A9  5A				POP		EDX
 000002AA  59				POP		ECX
 000002AB  5B				POP		EBX
 000002AC  58				POP		EAX
 000002AD  5D				POP		EBP
 000002AE  C2 000C			RET		12

 000002B1			WriteVal ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	Calculation
				;
				; The 'Calculation' procedure receives an array of SDWORDs and calculates the sum and truncated average.
				;
				; Preconditions:	None 
				; Postconditions:	All registers remain unmodified. VARIABLE outputSum [EBP+12], outputAvg [EBP+16] modified
				; Receives:			REGISTERS: EBP, EAX, EBX, ECX, EDX, ESI  
				;					VARIABLES: lenSavedInt [EBP+8], OFFSET outputSum [EBP+12], OFFSET outputAvg [EBP+16], OFFSET savedIntegers [EBP+20]
				;					
				; Returns:			VARIABLE outputSum [EBP+12], outputAvg [EBP+16]
				;-----------------------------------------------------------------------------------------------------------------------------------------------

 000002B1			Calculation	PROC
					
					; Preserve registers.

 000002B1  55				PUSH	EBP
 000002B2  8B EC			MOV		EBP, ESP
 000002B4  50				PUSH	EAX
 000002B5  53				PUSH	EBX
 000002B6  51				PUSH	ECX
 000002B7  52				PUSH	EDX
 000002B8  56				PUSH	ESI

 000002B9  8B 4D 08			MOV		ECX, [EBP+8]
 000002BC  8B 75 14			MOV		ESI, [EBP+20]
 000002BF  33 DB			XOR		EBX, EBX

					; Calculate sum.

 000002C1			_SumLoop:
 000002C1  AD				LODSD
 000002C2  03 D8			ADD		EBX, EAX
 000002C4  E2 FB			LOOP	_SumLoop
 000002C6  8B 45 0C			MOV		EAX, [EBP+12]
 000002C9  89 18			MOV		[EAX], EBX
 000002CB  EB 00			JMP		_CalculateAvg

					; Calculate average.

 000002CD			_CalculateAvg:
 000002CD  8B C3			MOV		EAX, EBX
 000002CF  8B 5D 08			MOV		EBX, [EBP+8]
 000002D2  99				CDQ		
 000002D3  F7 FB			IDIV	EBX
 000002D5  8B 5D 10			MOV		EBX, [EBP+16]
 000002D8  89 03			MOV		[EBX], EAX
 000002DA  EB 00			JMP		_CalculationEnd

					; Pop preserved registers.

 000002DC			_CalculationEnd:
 000002DC  5E				POP		ESI
 000002DD  5A				POP		EDX
 000002DE  59				POP		ECX
 000002DF  5B				POP		EBX
 000002E0  58				POP		EAX
 000002E1  5D				POP		EBP
 000002E2  C2 0010			RET		16

 000002E5			Calculation	ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	InputCount
				;
				; The 'InputCount' procedure receives an SDWORD and calculates the number of digits, returning the count of digits.
				;
				; Preconditions:	None 
				; Postconditions:	All registers remain unmodified. VARIABLE OFFSET sumCount [EBP+12] | OFFSET avgCount [EBP+12] | 
				;					OFFSET savedIntCount [EBP+12] modified 
				;
				; Receives:			REGISTERS: EBP, EAX, EBX, ECX, EDX
				;					VARIABLES: outputSum [EBP+8] | outputAvg [EBP+8] | savedIntOutput [EBP+8],  OFFSET sumCount [EBP+12] | 
				;							   OFFSET avgCount [EBP+12] | OFFSET savedIntCount [EBP+12]
				;					
				; Returns:			VARIABLE sumCount [EBP+12] | avgCount [EBP+12] | savedIntCount [EBP+12]
				;-----------------------------------------------------------------------------------------------------------------------------------------------

 000002E5			InputCount PROC
					
					; Preserve registers.

 000002E5  55				PUSH	EBP
 000002E6  8B EC			MOV		EBP, ESP
 000002E8  50				PUSH	EAX
 000002E9  53				PUSH	EBX
 000002EA  51				PUSH	ECX
 000002EB  52				PUSH	EDX

					; Check if number is negative, if so negate it. 

 000002EC			_PrepareInputCalLoop:
 000002EC  8B 45 08			MOV		EAX, [EBP+8]
 000002EF  BB 0000000A			MOV		EBX, 10
 000002F4  8B 4D 0C			MOV		ECX, [EBP+12]
 000002F7  83 F8 00			CMP		EAX, 0
 000002FA  7F 04			JG		_InputCal
 000002FC  F7 D8			NEG		EAX
 000002FE  EB 00			JMP		_InputCal

					; Calculate the number of digits.

 00000300			_InputCal:
 00000300  83 F8 0A			CMP		EAX, 10
 00000303  7C 0D			JL		_SingleDigitWrite
 00000305  83 F8 01			CMP		EAX, 1
 00000308  74 0D			JE		_InputCountEnd
 0000030A  99				CDQ
 0000030B  F7 F3			DIV		EBX
 0000030D  83 01 01			ADD		DWORD PTR [ECX], 1
 00000310  EB EE			JMP		_InputCal

 00000312			_SingleDigitWrite:
 00000312  83 01 01			ADD		DWORD PTR [ECX], 1
 00000315  EB 00			JMP		_InputCountEnd

					; POP preserved registers.

 00000317			_InputCountEnd:
 00000317  5A				POP		EDX
 00000318  59				POP		ECX
 00000319  5B				POP		EBX
 0000031A  58				POP		EAX
 0000031B  5D				POP		EBP
 0000031C  C2 0008			RET		8

 0000031F			InputCount ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	ClearArray
				;
				; The 'ClearArray' procedure receives an array and its length and clears it.
				;
				; Preconditions:	None 
				; Postconditions:	All registers remain unmodified. VARIABLE OFFSET writeValOutput [EBP+12] modified 
				; Receives:			REGISTERS: EBP, EAX, ECX, EDI
				;					VARIABLES: lenWriteVal [EBP+8], OFFSET writeValOutput [EBP+12] 
				;					
				; Returns:			VARIABLE OFFSET writeValOutput [EBP+12] 
				;-----------------------------------------------------------------------------------------------------------------------------------------------

 0000031F			ClearArray PROC
					
					; Preserve registers.

 0000031F  55				PUSH	EBP
 00000320  8B EC			MOV		EBP, ESP
 00000322  50				PUSH	EAX
 00000323  51				PUSH	ECX
 00000324  57				PUSH	EDI

					; Fill passed array with 0s. 

 00000325  B8 00000000			MOV		EAX, 0
 0000032A  8B 4D 08			MOV		ECX, [EBP+8]
 0000032D  8B 7D 0C			MOV		EDI, [EBP+12]
 00000330  FC				CLD
 00000331  F3/ AA			REP		STOSB

					; Pop preserved registers. 

 00000333  5F				POP		EDI
 00000334  59				POP		ECX
 00000335  58				POP		EAX
 00000336  5D				POP		EBP
 00000337  C2 0008			RET		8

 0000033A			ClearArray ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------
				; Name:	Goodbye
				;
				; The 'Goodbye' procedure outputs a closing message to the user.
				;
				; Preconditions:	PROC WriteString, CrLf
				; Postconditions:	All registers remain unmodified.
				; Receives:			REGISTERS: EBP, EDX
				;					VARIABLES: OFFSET outro_1 [EBP+8] 
				;					
				; Returns:			None 
				;-----------------------------------------------------------------------------------------------------------------------------------------------

 0000033A			Goodbye PROC
					
					; Preserve used registers.

 0000033A  55				PUSH	EBP
 0000033B  8B EC			MOV		EBP, ESP
 0000033D  52				PUSH	EDX

					; Output parting message. 

 0000033E  8B 55 08			MOV		EDX, [EBP+8]
 00000341  E8 00000000 E		CALL	Crlf
 00000346  E8 00000000 E		CALL	WriteString
					
					; Pop used registers.

 0000034B  5A				POP		EDX
 0000034C  5D				POP		EBP
 0000034D  C2 0004			RET		4

 00000350			Goodbye ENDP


				END main
Microsoft (R) Macro Assembler Version 14.34.31937.0	    03/19/23 12:31:54
Proj6_bramank.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000026B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000350 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Calculation  . . . . . . . . . .	P Near	 000002B1 _TEXT	Length= 00000034 Public STDCALL
  _SumLoop . . . . . . . . . . .	L Near	 000002C1 _TEXT	
  _CalculateAvg  . . . . . . . .	L Near	 000002CD _TEXT	
  _CalculationEnd  . . . . . . .	L Near	 000002DC _TEXT	
ClearArray . . . . . . . . . . .	P Near	 0000031F _TEXT	Length= 0000001B Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Goodbye  . . . . . . . . . . . .	P Near	 0000033A _TEXT	Length= 00000016 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputCount . . . . . . . . . . .	P Near	 000002E5 _TEXT	Length= 0000003A Public STDCALL
  _PrepareInputCalLoop . . . . .	L Near	 000002EC _TEXT	
  _InputCal  . . . . . . . . . .	L Near	 00000300 _TEXT	
  _SingleDigitWrite  . . . . . .	L Near	 00000312 _TEXT	
  _InputCountEnd . . . . . . . .	L Near	 00000317 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000001AD _TEXT	Length= 000000AC Public STDCALL
  _PrepareLoop . . . . . . . . .	L Near	 000001B5 _TEXT	
  _Prompt  . . . . . . . . . . .	L Near	 000001BF _TEXT	
  _NegativeNumber  . . . . . . .	L Near	 000001E5 _TEXT	
  _NonNegative . . . . . . . . .	L Near	 000001F0 _TEXT	
  _Validate  . . . . . . . . . .	L Near	 000001FB _TEXT	
  _MainLoop  . . . . . . . . . .	L Near	 0000021A _TEXT	
  _InvalidInput  . . . . . . . .	L Near	 0000022E _TEXT	
  _ValidInput  . . . . . . . . .	L Near	 0000023D _TEXT	
  _WriteMemory . . . . . . . . .	L Near	 00000249 _TEXT	
  _ReadValEnd  . . . . . . . . .	L Near	 00000250 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000259 _TEXT	Length= 00000058 Public STDCALL
  _PrepareLoop . . . . . . . . .	L Near	 00000261 _TEXT	
  _IsNegative  . . . . . . . . .	L Near	 0000026E _TEXT	
  _NonNegative . . . . . . . . .	L Near	 0000027A _TEXT	
  _WriteValLoop  . . . . . . . .	L Near	 00000282 _TEXT	
  _DisplayString . . . . . . . .	L Near	 0000029C _TEXT	
  _WriteValEnd . . . . . . . . .	L Near	 000002A8 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introduction . . . . . . . . . .	P Near	 0000017A _TEXT	Length= 00000033 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000017A Public STDCALL
  _PrepareValLoop  . . . . . . .	L Near	 00000019 _TEXT	
  _ReadValLoop . . . . . . . . .	L Near	 00000025 _TEXT	
  _ReadValLoopEnd  . . . . . . .	L Near	 0000004E _TEXT	
  _PrepareWriteValLoop . . . . .	L Near	 00000099 _TEXT	
  _WriteValLoop  . . . . . . . .	L Near	 000000A6 _TEXT	
  _SkipLastComma . . . . . . . .	L Near	 000000EB _TEXT	
  _WriteValLoopEnd . . . . . . .	L Near	 00000103 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgCount . . . . . . . . . . . .	DWord	 0000022F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_1  . . . . . . . . . . . .	Byte	 00000130 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_1  . . . . . . . . . . . .	Byte	 00000110 _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000022 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 0000004F _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000000A4 _DATA	
lenSavedInt  . . . . . . . . . .	DWord	 0000021F _DATA	
lenStringInpt  . . . . . . . . .	DWord	 0000021B _DATA	
lenWriteVal  . . . . . . . . . .	DWord	 00000223 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputAvg  . . . . . . . . . . .	DWord	 00000267 _DATA	
outputSum  . . . . . . . . . . .	DWord	 00000263 _DATA	
output_1 . . . . . . . . . . . .	Byte	 00000168 _DATA	
output_2 . . . . . . . . . . . .	Byte	 0000018D _DATA	
output_3 . . . . . . . . . . . .	Byte	 000001AB _DATA	
outro_1  . . . . . . . . . . . .	Byte	 000001C6 _DATA	
readValOutput  . . . . . . . . .	DWord	 00000233 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
savedIntCount  . . . . . . . . .	DWord	 00000227 _DATA	
savedIntOutput . . . . . . . . .	DWord	 0000025F _DATA	
savedIntegers  . . . . . . . . .	DWord	 00000237 _DATA	
stringInput  . . . . . . . . . .	Byte	 000001F3 _DATA	
sumCount . . . . . . . . . . . .	DWord	 0000022B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
writeValOutput . . . . . . . . .	Byte	 00000207 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
